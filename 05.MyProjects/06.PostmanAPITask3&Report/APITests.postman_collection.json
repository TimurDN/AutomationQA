{
	"info": {
		"_postman_id": "6ce76277-4fc5-443a-bb60-860114a0e64f",
		"name": "APITests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28727670"
	},
	"item": [
		{
			"name": "Counting posts for user",
			"item": [
				{
					"name": "All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status code testing with appropriate error message.\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
									"});\r",
									"\r",
									"//Checking if response is an array with at least one element with proper error message.\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData, \"Response should be an array with at least one element\").to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"///Checking fields of response body if they are valid with proper error messages.\r",
									"pm.test(\"Each post has the required fields - userId, id, title, and body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(post) {\r",
									"        pm.expect(post, \"Post should have userId\").to.have.property('userId');\r",
									"        pm.expect(post, \"Post should have id\").to.have.property('id');\r",
									"        pm.expect(post, \"Post should have title\").to.have.property('title');\r",
									"        pm.expect(post, \"Post should have body\").to.have.property('body');\r",
									"    });\r",
									"});\r",
									"\r",
									"//Checking userId as it must not be negative\r",
									"pm.test(\"UserId is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(post) {\r",
									"        pm.expect(post.userId, \"UserId should be a non-negative integer\").to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(post) {\r",
									"        pm.expect(post.id, \"Id should be a non-negative integer\").to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"//Checking title and body verifying they are not empty\r",
									"pm.test(\"Title and body are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(post) {\r",
									"        pm.expect(post.title, \"Title should not be empty\").to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"        pm.expect(post.body, \"Body should not be empty\").to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{postsEndPoint}}",
							"host": [
								"{{baseUrl}}{{postsEndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Posts Of UserId 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    // Extracting userId from the response and setting it as a collection variable\r",
									"    pm.test(\"Extract userId from the response and set it as a collection variable\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var userIdFromResponse = jsonData.length > 0 ? jsonData[0].userId : null;\r",
									"\r",
									"        if (userIdFromResponse !== null) {\r",
									"            pm.collectionVariables.set(\"userId\", userIdFromResponse);\r",
									"            console.log(`userId set to ${userIdFromResponse}`);\r",
									"        } else {\r",
									"            console.error(\"Unable to extract userId from the response\");\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Using collection variable for userId\r",
									"    var userId = pm.collectionVariables.get(\"userId\");\r",
									"    //Using this hardcoded since it is fixed in requirements.\r",
									"    var expectedNumPosts = 10;\r",
									"\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
									"    });\r",
									"\r",
									"    //Testing if our user has the expected amount of posts. Throwing error message if not.\r",
									"    pm.test(`User ${userId} should have ${expectedNumPosts} posts`, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var actualNumPosts = jsonData.length;\r",
									"        pm.expect(actualNumPosts, \r",
									"        `Expected ${expectedNumPosts} posts for user ${userId}, but found ${actualNumPosts}`).to.eql(parseInt(expectedNumPosts));\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{postsEndPoint}}?userId=5",
							"host": [
								"{{baseUrl}}{{postsEndPoint}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Posts Of UserId 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    // Extracting userId from the response and setting it as a collection variable\r",
									"    pm.test(\"Extract userId from the response and set it as a collection variable\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var userIdFromResponse = jsonData.length > 0 ? jsonData[0].userId : null;\r",
									"\r",
									"        if (userIdFromResponse !== null) {\r",
									"            pm.collectionVariables.set(\"userId\", userIdFromResponse);\r",
									"            console.log(`userId set to ${userIdFromResponse}`);\r",
									"        } else {\r",
									"            console.error(\"Unable to extract userId from the response\");\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Using collection variable for userId\r",
									"    var userId = pm.collectionVariables.get(\"userId\"); // Use collectionVariables instead of variables\r",
									"    // Using this hardcoded since it is fixed in requirements.\r",
									"    var expectedNumPosts = 10;\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200, 'Status received is ' + pm.response.status);\r",
									"    });\r",
									"\r",
									"    // Testing if our user has the expected amount of posts. Throwing error message if not.\r",
									"    pm.test(`User ${userId} should have ${expectedNumPosts} posts`, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var actualNumPosts = jsonData.length;\r",
									"        pm.expect(actualNumPosts,\r",
									"            `Expected ${expectedNumPosts} posts for user ${userId}, but found ${actualNumPosts}`).to.eql(parseInt(expectedNumPosts));\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{postsEndPoint}}?userId=7",
							"host": [
								"{{baseUrl}}{{postsEndPoint}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Posts Of UserId 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status code testing with appropriate error message.\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
									"});\r",
									"\r",
									"//Checking if response is an array with at least one element with proper error message.\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData, \"Response should be an array with at least one element\").to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"///Checking fields of response body if they are valid with proper error messages.\r",
									"pm.test(\"Each post has the required fields - userId, id, title, and body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData, \"Response should be an array\").to.be.an('array');\r",
									"    responseData.forEach(function(post) {\r",
									"        pm.expect(post, \"Post should have userId\").to.have.property('userId');\r",
									"        pm.expect(post, \"Post should have id\").to.have.property('id');\r",
									"        pm.expect(post, \"Post should have title\").to.have.property('title');\r",
									"        pm.expect(post, \"Post should have body\").to.have.property('body');\r",
									"        pm.expect(post.userId, \"UserId should be a non-negative integer\").to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(post.id, \"Id should be a non-negative integer\").to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(post.title, \"Title should not be empty\").to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"        pm.expect(post.body, \"Body should not be empty\").to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{postsEndPoint}}?userId=9",
							"host": [
								"{{baseUrl}}{{postsEndPoint}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "9"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unique ID per post",
			"item": [
				{
					"name": "Unique Post ID Per Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not empty and is an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"//Verifying that each post in response body has unique ID. \r",
									"pm.test(\"Each post has a unique ID\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const postIds = new Set();\r",
									"\r",
									"    // Loop through each post in the response.\r",
									"    responseData.forEach(function(post) {\r",
									"         // Test for each post to ensure it has a unique ID.\r",
									"        pm.test(`Post with ID ${post.id}: Unique ID`, function () {\r",
									"            pm.expect(post.id, `Post with ID ${post.id} should have a unique ID`).to.be.a('number');\r",
									"            pm.expect(postIds.has(post.id), `Post with ID ${post.id} has a duplicate ID`).to.be.false;\r",
									"            postIds.add(post.id);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{postsEndPoint}}",
							"host": [
								"{{baseUrl}}{{postsEndPoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": ""
		}
	]
}